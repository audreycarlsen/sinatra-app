date: 2013-12-15

<div class='reverse_links'>
<h2 class='h2_blog'>Sunday, December 15, 2013</h2><br>
<h1 class='h1_blog'>Week Six/Seven</h1>

<p>My apologies for not posting last week. It was a crazy week in many ways - for one, we started to learn Rails. And on top of that, my computer's hard drive decided to go kaput. Luckily, my computer is back up and running again. I was resigned to the fact that I was probably going to have to wipe my hard drive and reinstall OS X. But luckily, the problem turned out to be nothing more than a faulty hard drive bracket.</p> 

<p>The only thing I can tell you about hard drive brackets is that they are fairly easily replaced. Sitting at the Genius Bar made me realize that even though I understand computer software way better than I used to, I still am a complete novice when it comes to hardware. We describe mysterious bits of code as "magic," but the real magic lies in how a computer, this eletronic brick in front of me, can take any of the instructions given to me and turn them into something functional. This week, we're going to be learning more about computer science, as opposed to programming, and I look forward to learning even the basics of how computers actually operate.</p>

<p>Week Seven, however, was very much about coding. And while the focus of the week was on gaining more comfort with Rails, I'd say that my biggest accomplishment was finally feeling confident with the incredibly annoying, yet equally necessary version-control system known as GitHub.</p>

<p>For those of you as-of-yet unfamiliar with GitHub, it's basically a way for programmers to share their code with others and collaborate on a single project. It's also useful as a way to back-up your data, as I learned this week when I thought I had lost all of the data from my hard drive.</p>

<p>It's taken me seven weeks to finally become comfortable with GitHub, so it seems unreasonable to try to summarize the entire beast in one blog post. Instead, I'll focus on the idea of branching, which took the longest for me to master (probably because I initially didn't understand it, and so I found it scary, and so I avoided using it whenever possible, and so I never got around to understanding it).</p>

<p>Branching is handy because it allows multiple contributors to work on the same code in parallel without risking messing up the "master code." The final version of the code is kept on a "master branch," and most of the edits are made to parallel branches of this master branch, which can then be merged back into the master branch once it's clear that the code functions.</p>

<p>Branching is really useful, because it allows different people to work on the same code without getting all tangled up in each other's code. However, some difficulties can arise when you choose to merge your changes back into the master branch. Ideally, no two people would be working on the same sections of code. I'd be working on one file, you'd be working on another, such that when we both merged our branches with the master branch, it would simply reflect both of our edits.</p>

<p>But what if we're both working on the same bits of code? This is what I always dread about using GitHub - the infamous "merge conflict error." However, Git is smart enough to know that when a conflict like this arises, it's time for humans to fix the error. At this point, it's the coders' responsibility to go into the code and fix the merge errors by hand, deciding which edits to keep and which to discard. At first I found this really intimidating - what if I did the wrong thing? What if I accidentally deleted really important code? But now that I understand the branching and merging process, I find it empowering, because even when we utilize such streamlined and automated tools as GitHub, when it comes down to it, it's still the programmer who's in charge.</p>