date: 2014-1-3

<div class='reverse_links'>
<h2 class='h2_blog'>Friday, January 3, 2014</h2><br>
<h1 class='h1_blog'>Week Six</h1>

<p>We've been making Rails apps for several weeks now - a paired-partner "cookbook" app, a four-person project building an e-commerce site based on Amazon.com, and now a personal project ripping off Facebook's concept for a social media site.</p>

<p>Being introduced to Rails felt like being thrown into the deep end of a pool, and several weeks into it, I still feel like I'm just treading enough water to keep my head above the surface. There's so much to absorb and to try to understand all at once - it's best to try to take it slow, bite off manageable chunks, and not get too upset about not understanding how every piece fits into the bigger picture.</p>

<p>I've recently realized that one of the things that's actually been the most challenging in learning Rails is the fact that Rails is incredibly powerful and does a ton of "magic" that I'm not always aware of. I can't count the number of times I've asked a question about Rails, about why I do or don't have to specify a parameter, for example, and the response from my instructor will invariably be "Rails just KNOWS."</p>

<p>Don't get me wrong, Rails can be a truly awesome thing. Scaffolds, for example, cut out so many extra steps. With Rails doing half of the work, you can create a simple web app in almost no time at all.</p>

<p>The drawback to all of this, however, is that the programmer doesn't necessarily know what's going on. It's taken me a while to get used to the idea that my code will have many lines that I never had a hand in writing. Having so much of the process be automated or shortcutted is great for programmers who already understand what Rails is doing for them, but it can be very difficult for people just learning.</p>

<p>The reason for this is that I often don't know when I've done something wrong, because as long as the mistake is small enough, or simply not quite the correct or conventional way to do things, Rails can get along just fine and assume that it knows what I want it to do. Great, this means that my app can get by even with sometimes less-than-perfect code, but it also means that I don't necessarily notice my mistakes right away, or learn to distinguish between good and bad coding practices.</p>

<p>Slowly, I'm teasing it all apart. I know what resources do now, and I know that Rails will assume that you're trying to submit a GET request unless you specify otherwise. But there's still plenty more in the code in my very own app that I have yet to fully understand.</p>