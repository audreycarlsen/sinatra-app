date: 2014-2-22

<div class='reverse_links'>
<h2 class='h2_blog'>Saturday, February 22, 2014</h2><br>
<h1 class='h1_blog'>I'm Here to Resque You</h1>

<p>I spent last Friday trying to push my most recent <a href="http://gnome-sweet-gnome.herokuapp.com/" target="_blank">web app</a> to production. The biggest challenge was figuring out how to implement a gem called <a href="https://github.com/resque/resque" target="_blank">Resque</a>, which allows you to run background jobs (such as mailing all users when a new blog post is created) without having the hold up the rest of your app. In this post, I'm going to assume that you already have Resque working locally and that you are now trying to push your app to Heroku.</p>

<p>(For full disclosure, I could not have gotten Resque working on Heroku without the incredible amount of time and energy that one of my <a href="https://github.com/Sgtpluck" target="_blank">classmates</a> put into figuring out this problem. Huge props to her.)</p>

<p>The first thing you're going to need to do is get an external Redis server up and running for your app to use in production. To do this, sign up for an account with <a href="http://redistogo.com/" target="_blank">RedisToGo</a>. Select the free hosting plan and create a new  Redis "instance." RedisToGo will provide you with a URL containing all of the information your app will need to know about this instance, including host, port, and password. Create a "redis.rb" initializer file in your config directory, containing the following code:</p>

<pre style="background:#fdf6e3;color:#586e75"><span style="color:#a57800">ENV</span>[<span style="color:#269186"><span style="color:#d01f1e">'</span>REDISTOGO_URL<span style="color:#d01f1e">'</span></span>] <span style="color:#859900">||=</span> <span style="color:#269186"><span style="color:#d01f1e">"</span>redis://username:password@host:6379/<span style="color:#d01f1e">"</span></span>

<span style="color:#738a05;font-weight:700">if</span> <span style="color:#a57800">Rails</span>.env.production?
  uri <span style="color:#859900">=</span> <span style="color:#a57800">URI</span>.parse(<span style="color:#a57800">ENV</span>[<span style="color:#269186"><span style="color:#d01f1e">'</span>REDISTOGO_URL<span style="color:#d01f1e">'</span></span>])
  <span style="color:#a57800">Resque</span>.redis <span style="color:#859900">=</span> <span style="color:#a57800">Redis</span>.<span style="color:#748b00">new</span>(<span style="color:#269186">:host</span> => uri.host, <span style="color:#269186">:port</span> => uri.port, <span style="color:#269186">:password</span> => uri.password)
<span style="color:#738a05;font-weight:700">elsif</span> <span style="color:#a57800">Rails</span>.env.development?
  <span style="color:#a57800">Resque</span>.redis <span style="color:#859900">=</span> <span style="color:#a57800">Redis</span>.<span style="color:#748b00">new</span>(<span style="color:#269186">:host</span> => <span style="color:#269186"><span style="color:#d01f1e">'</span>localhost<span style="color:#d01f1e">'</span></span>, <span style="color:#269186">:port</span> => <span style="color:#269186"><span style="color:#d01f1e">'</span>6379<span style="color:#d01f1e">'</span></span>)
<span style="color:#738a05;font-weight:700">end</span>
</pre>

<p>Basically, this is letting your application know which instance of the Redis server to use based on which environment it is running in. If it is running in production, it should be using the instance provided by RedisToGo, and if it is running in development, it should be using your local Redis server (I believe the port is 6379 for everyone, but don't quote me on that).</p>

<p>Now that we've got Redis set up, let's move on to Resque itself. Heroku lets you add workers to your app, but it's going to charge you for it. The best way to implement Resque on Heroku is to use an autoscaler that only adds a worker when it's needed, so that you are only charged for the brief time that it takes for the worker to do its job (this amounts to a couple of cents).</p>

<p>There are several Heroku autoscaler gems out there. I used <a href="https://rubygems.org/gems/heroku_resque_autoscaler" target="_blank">this one</a>.</p>

<p>First, add the gem to your Gemfile. Note that you might also have to specify an older version of Resque in order for it to be compatible with this new gem:</p>

<pre style="background:#fdf6e3;color:#586e75"><span style="color:#748b00">gem</span> <span style="color:#269186"><span style="color:#d01f1e">'</span>resque<span style="color:#d01f1e">'</span></span>, <span style="color:#269186"><span style="color:#d01f1e">'</span>~> 1.23.0<span style="color:#d01f1e">'</span></span>
<span style="color:#748b00">gem</span> <span style="color:#269186"><span style="color:#d01f1e">'</span>heroku_resque_autoscaler<span style="color:#d01f1e">'</span></span>
</pre>

<p>This gem has fairly straightforward <a href="https://github.com/G5/heroku_resque_autoscaler" target="_blank">documentation</a>, so I'm not going to repeat all of the instructions here. Basically, you'll need to create another intiailizer for the autoscaler, including information about your Heroku API key and app name. (The app name should just be the name itself, i.e. the part preceding ".herokuapp.com" in the URL.) You will also need to make a small change to your worker files so that they "extend" the autoscaler (don't ask me what that means, but it seems to be essential).</p>

<p>Once you do everything the documentation tells you to do, you're still going to need to add one more thing. (Why the gem doesn't include this in its documentation is beyond me.) If you don't already have one, create a "Procfile" in the main directory of your app (same place you'd put a Gemfile or Rakefile), and add the following code (WARNING: THIS IS WHERE THINGS START TO GET REALLY HAND-WAVY FOR ME):</p>

<pre style="background:#fdf6e3;color:#586e75"><span style="color:#269186">worker:</span> env <span style="color:#a57800">TERM_CHILD</span><span style="color:#859900">=</span><span style="color:#269186">1</span> <span style="color:#a57800">QUEUE</span><span style="color:#859900">=</span><span style="color:#859900">*</span> bundle exec rake <span style="color:#269186">resque:</span>work
</pre>

<p><em>What the hell is a Procfile?</em>, you might ask. Good question. This is the first time I've ever encountered such a thing. As far as I can gather, the purpose of the Procfile is to define any "processes" (e.g. Resque jobs?) that Heroku needs to know about. I was fine with just throwing this code into my app with only a vague understanding of why, but if you want to understand it better, <a href="https://devcenter.heroku.com/articles/procfile" target="_blank">this</a> might be a good place to start.</p>

<p>And there you have it! A quick and dirty way to get Resque working without dishing out a ton of money.</p>