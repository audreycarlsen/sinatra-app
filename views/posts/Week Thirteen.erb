date: 2014-2-08

<div class='reverse_links'>
<h2 class='h2_blog'>Saturday, February 8, 2014</h2><br>
<h1 class='h1_blog'>Dummy Controllers for Dummies</h1>

<p>Last week, I faced one of my greatest coding fears: RSpec. Somehow, miraculously, I survived, and walked away with an appreciation for <em>why test-driven development might actually be a really good idea</em> (did I really just say that?!). I want to share here a little Rspec nugget that one of our wonderful TA's, <a href="https://twitter.com/drbrain" target="_blank">Eric</a>, taught me. Ladies and gentlemen, I bring you... the dummy controller.</p>

<div class='code'>
  <p>class DummyController < ApplicationController</p>
    <p class='indent'>def test_current_user</p>
      <p class='indent2'>redirect_to user_path(@current_user)</p>
    <p class='indent'>end</p>
  <p>end</p>
</div>

<p>This controller is actually in one of my spec files. Like any normal controller, it inherits from <span class='code'>ApplicationController</span>, thus it has all of the functionality described in my application controller, including a <span class='code'>current_user</span> method that assigns the currently signed-in user to a "current user" variable (this method is run whenever the application controller is called on, thanks to a <span class='code'>before_action</span> linked to <span class='code'>current_user</span>). This makes it easier to write logic to make parts of my app only accessible when a user is logged in and exists in my database. The method also includes a <span class='code'>rescue</span> (read more about rescues <a href="http://audrey-sinatra.herokuapp.com/blog/Week%20Twelve" target="_blank">here<a>!) that re-sets the session to nil and redirects to the homepage with a flash message if the user currently stored in the session does not exists in the database (i.e. if they were deleted by an admin).</p>

<div class='code'>
  <p class='indent'>def current_user</p>
    <p class='indent2'>@current_user ||= User.find(session[:user_id]) if session[:user_id]</p>
  <p class='indent'>rescue ActiveRecord::RecordNotFound</p>
    <p class='indent2'>reset_session</p>
    <p class='indent2'>redirect_to root_path, notice: "You do not exist. Sorry!"</p>
  <p class='indent'>end</p>
</div>

<p>So why is this dummy controller so useful? Well, I wanted to write a spec to test that <span class='code'>current_user</span>worked. Since it's including in my application controller, I could in theory write tests for every situation that calls on this method. But that sounds exhausting. In theory, I could also write just one spec that tests the current_user method for a specific situation (if it works in that situation, then it works, right?). But it's possible that at some later date, I'd want to change that situation to not require a user to be signed in. But I'd still want to make sure that <span class='code'>current_user</span> works.</p>

<p>This is where a dummy controller comes in. It can be used to test methods without linking them to real situations. Since the dummy controller inherits from ApplicationController, if I test a method within the dummy controller (e.g. the aptly-named <span class='code'>test_current_user</span> method), it will first run <span class='code'>current_user</span>. If <span class='code'>current_user</span> is working properly, my specs should pass. Here's an example of a spec I wrote to test if the method does what I want it to do when a user (such as a user with ID of "A" ...that just doesn't make sense) can't be found in the database:

<div class='code'>
  <p>describe DummyController do</p>

    <p class='indent'>describe "current_user" do</p>

      <p class='indent2'>it "handles nonexistent users" do</p>

        <p class='indent3'>session[:user_id] = "A"</p>

        <p class='indent3'>get :test_current_user</p>

        <p class='indent3'>expect(response).to redirect_to root_path</p>
        <p class='indent3'>expect(flash[:notice]).to_not be_blank</p>
        <p class='indent3'>expect(session[:user_id]).to be_nil</p>
      <p class='indent2'>end</p>
    <p class='indent'>end</p>
  <p>end</p>
</div>

<p>Note that it really doesn't matter what I put in the <span class='code'>test_current_user</span> method in the dummy controller, since what we're really doing is using it as a way to run the <span class='code'>current_user</span> method. It does need to have a redirect though, otherwise Rspec will complain about not being able to find the correct view (since the test_dummer_controller view doesn't exist!).</p>

<p>We will also need to create a new route for this dummy controller. I decided to create this route only in my testing environment using the following code:</p>

<div class='code'>
  <p>if Rails.env == "test"</p>
    <p class='indent'>get 'dummy/test_current_user' => 'dummy#test_current_user'</p>
  <p>end</p>
</div>

I still don't feel very comfortable writing specs. But with repeated exposure to tools like this, I feel a lot more confident than I used to in my testing abilities.