date: 2014-2-18

<div class='reverse_links'>
<h2 class='h2_blog'>Tuesday, February 18, 2014</h2><br>
<h1 class='h1_blog'>Dummy Controllers for Dummies</h1>

<p>I've been hearing the term "Ajax" thrown around a lot recently. No, not the mythological Greek hero, Ajax the Great. I'm talking about something even greater: <strong>A</strong>synchronous <strong>J</strong>avascript <strong>A</strong>nd <strong>X</strong>ML. <em>Whoa.</em></p>

<p>In brief, AJAX is used to send data from your browser to a server without sending a new HTTP request (i.e. without refreshing or reloading the web page). Examples of sending data to a server could include creating, updating, or deleting items from an ActiveRecord database. AJAX seems pretty intimidating at first, but it's actually really cool, and once you get the hang of it, it's hard to not want to throw it in everywhere.</p>

<p>Here's an example of some code I wrote today using AJAX. When a user fills out a form with their email address and clicks the submit button, it updates their information in my database with their email address, all without sending a new HTTP request.</p>

<div class='code'>
  <p>$(function() {</p>
    <p class='indent'>$("#submit_button").on( "click", function() {</p>
      <p class='indent2'>$.ajax({</p>
        <p class='indent3'>url: $(this).parents('form').attr("action"),</p>
        <p class='indent3'>type: 'PATCH',</p>
        <p class='indent3'>dataType: 'json',</p>
        <p class='indent3'>data: {</p>
          <p class='indent4'>user: {</p>
            <p class='indent5'>email: $("#user_email").val()</p>
          <p class='indent4'>}</p>
        <p class='indent3'>},</p>
      <p class='indent2'>})</p>
      <p class='indent2'>.done(function(data){</p>
        <p class='indent3'>$("#email_form").toggle();</p>
      <p class='indent2'>})</p>
      <p class='indent2'>.fail(function(){</p>
        <p class='indent3'>alert("Something has gone horribly wrong.");</p>
      <p class='indent2'>});</p>
      <p class='indent2'>return false;</p>
    <p class='indent'>});</p>
  <p>});</p>
</div>

<p>I began by adding an event watcher such that <span class="code">.ajax</span> is only called upon when the submit button is clicked. The <span class="code">.ajax</span> method takes a hash of parameters:</p>

<ul>
  <li><span class="code">url</span> specifies the route of the AJAX request (which, in this case, can be pulled from the action attribute of the parent form, as can be seen in the markup)</li>
  <li><span class="code">type</span> specifies the type of HTTP request being made
  <li><span class="code">dataType</span> specifies the way that the data should be sent to the server (normally, if we weren't using AJAX, this would be HTML, but here it's JSON)</li>
  <li><span class="code">data</span> is a hash including any data (i.e. things that would normally be accessed through <span class="code">params</span>) that is necessary for the request</li>
</ul>

<p>Appended to the <span class="code">.ajax</span> method are two other methods, <span class="code">.done</span> and <span class="code">.fail</span>.</p>

<p>The first method, <span class="code">.done</span>, contains anything that I want to happen if the AJAX request is successful. In this case, I want the email form that was just used to submit an email address to be hidden. JQuery has a really convenient method called <span class="code">.toggle</span> that switches elements back and forth between hidden and visible.</p>

<p>The second method, <span class="code">.fail</span>, specifies what I want to have happen if the request is not successful. In this case, I want there to be an error message.</p>

<p>I don't use it here, but there is also a <span class="code">.always</span> method that can be appended to specify anything that should happen regardless of if the request is successful or not.</p>

<p>The final bit of code -- return false --  disables the normal functionality of the button that is being watched. So when a user clicks on the submit button, instead of it redirecting to a different page, like it normally would, the browser instead does what is specified in the AJAX method. However, it's important to keep the basic functionality of the button intact for dinosaurs -- sorry, I mean users -- who do not user JavaScript-compatible browsers.</p>